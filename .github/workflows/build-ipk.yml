name: Build Luci App IPK (No Docker)

on:
  push:
    branches: [ "master" ] # 或者你的主分支名称
  pull_request:
    branches: [ "master" ] # 或者你的主分支名称
  workflow_dispatch: # 允许手动触发 Workflow

jobs:
  build:
    runs-on: ubuntu-latest # 使用 Ubuntu 最新版本作为构建环境 (不再使用 Docker 镜像)

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Build Environment
        run: |
          make defconfig
          make prepare
          # 安装 OpenWrt 构建依赖 (常见的依赖，可能需要根据实际情况调整)
          sudo apt-get update
          sudo apt-get install -y build-essential libncurses5-dev zlib1g-dev gawk gcc-multilib flex bison libssl-dev \
              rsync wget git-core subversion mercurial libxml-parser-perl \
              unzip gperf automake libtool shtool autoconf texinfo patchutils \
              bc diffstat curl file



      #- name: Configure Build (Optional - 如果需要自定义 OpenWrt 配置)
        # (与 Docker 版本相同，如果需要自定义 OpenWrt 配置，可以在这里添加步骤)
        # 例如，复制 .config 文件，或者使用 sed 修改 .config 文件
        # run: cp .config files/.config
        # run: sed -i 's/CONFIG_TARGET_x86_64=y/CONFIG_TARGET_x86_64=y/g' .config

      - name: Build Luci App
        run: |
          # 编译你的 Luci 应用 (package name 需要根据你的 Makefile 修改)
          make package/luci-app-naiveproxy/compile V=s


      - name: Find IPK file
        id: find_ipk
        run: |
          # 查找生成的 IPK 文件
          IPK_PATH=$(find bin/packages -name '*luci-app-naiveproxy*.ipk' -print -quit)
          echo "IPK_PATH=$IPK_PATH" >> $GITHUB_OUTPUT # 将 IPK_PATH 设置为步骤的输出

      - name: Upload IPK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: luci-app-naiveproxy-ipk # Artifact 名称
          path: ${{ steps.find_ipk.outputs.IPK_PATH }} # 上传找到的 IPK 文件路径 (从步骤输出获取)

      
